# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'vagrant-openstack-provider'

$script = <<SCRIPT
sudo apt-get update 
sudo apt-get install -y git vim python-pip 
#		sudo apt-get -y install git vim-gtk libxml2-dev libxslt1-dev libpq-dev python-pip libsqlite3-dev 
#		sudo apt-get -y build-dep python-mysqldb 
#		sudo pip install git-review tox 
git clone -b stable/kilo https://github.com/openstack-dev/devstack.git devstack
# make stack user, change ownership of devstack folder. 
sudo devstack/tools/create-stack-user.sh
sudo cp devstack/samples/local.conf devstack/localrc 
sudo chown -R stack devstack
cd devstack/
sudo su stack -c "./stack.sh"
SCRIPT

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # define instances in loop
  (1..3).each do |i|
	config.vm.define "devstack#{i}" do |devstack|
	  devstack.ssh.username = 'ubuntu'
	  # change to your own private key
	  devstack.ssh.private_key_path = '~/.ssh/csail-mylu-key.pem'

	  # define os instance
	  devstack.vm.provider :openstack do |os|
	    os.openstack_auth_url 	= 'https://nimbus.csail.mit.edu:5001/v2.0/tokens'	
		os.username             = ENV['OS_USERNAME']
        os.password             = ENV['OS_PASSWORD']
        os.tenant_name          = ENV['OS_TENANT_NAME']
        os.flavor               = 'lg.2core'
        os.server_name          = "vagrant-devstack#{i}"
		os.image                = '4dc46de2-e7f8-457d-b3fb-eb082d81d87b'
		os.endpoint_type        = 'publicURL'
	    # name of public key corresponding to ur private key on os project
		os.sync_method 			= 'none'
		os.keypair_name         = 'csail-mylu-key' 
	  end

	  devstack.vm.provision "shell" do |shell|
	    shell.inline = "cat /dev/null > /etc/hosts"
	  end

	  devstack.vm.hostname = "vagrant-devstack#{i}"
	  devstack.vm.provision :hostmanager

      # shell command to update vm and install devstack
	  devstack.vm.provision "shell", inline: $script

	end
  end
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
